
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Project
 * 
 */
export type Project = {
  projectId: string
  name: string
  createdAt: Date
  updatedAt: Date
  tags: string
  roles: string
  description: string
  start: Date
  end: Date
  endSubscription: Date
  coleaderId: string | null
  ownerId: string
  badge: string
  blockedSubscription: boolean
  status: string
  feedback: string | null
}

/**
 * Model Tags
 * 
 */
export type Tags = {
  id: string
  name: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  name: string | null
  password: string
  bornDate: Date
  gender: string
  n_dell: string
  managerId: string
  highligths: string
  points: number
  habilities: string
  isAdmin: boolean
  photoURL: string | null
  area: string
  linkedin: string | null
  createdAt: Date
  updatedAt: Date
  code: string | null
}

/**
 * Model Habilitie
 * 
 */
export type Habilitie = {
  id: string
  name: string
}

/**
 * Model Apply
 * 
 */
export type Apply = {
  id: string
  projectId: string
  userId: string
  offerName: string
  createdAt: Date
  updatedAt: Date
  status: string
  why: string | null
  habilities: string | null
  feedback: string | null
  isAccepted: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projects
 * const projects = await prisma.project.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.tags`: Exposes CRUD operations for the **Tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tags.findMany()
    * ```
    */
  get tags(): Prisma.TagsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.habilitie`: Exposes CRUD operations for the **Habilitie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habilities
    * const habilities = await prisma.habilitie.findMany()
    * ```
    */
  get habilitie(): Prisma.HabilitieDelegate<GlobalReject>;

  /**
   * `prisma.apply`: Exposes CRUD operations for the **Apply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applies
    * const applies = await prisma.apply.findMany()
    * ```
    */
  get apply(): Prisma.ApplyDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Project: 'Project',
    Tags: 'Tags',
    User: 'User',
    Habilitie: 'Habilitie',
    Apply: 'Apply'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    applies: number
  }

  export type ProjectCountOutputTypeSelect = {
    applies?: boolean
  }

  export type ProjectCountOutputTypeGetPayload<S extends boolean | null | undefined | ProjectCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProjectCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProjectCountOutputTypeArgs)
    ? ProjectCountOutputType 
    : S extends { select: any } & (ProjectCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProjectCountOutputType ? ProjectCountOutputType[P] : never
  } 
      : ProjectCountOutputType




  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    projects: number
    projectsColeader: number
    applies: number
  }

  export type UserCountOutputTypeSelect = {
    projects?: boolean
    projectsColeader?: boolean
    applies?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    projectId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tags: string | null
    roles: string | null
    description: string | null
    start: Date | null
    end: Date | null
    endSubscription: Date | null
    coleaderId: string | null
    ownerId: string | null
    badge: string | null
    blockedSubscription: boolean | null
    status: string | null
    feedback: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    projectId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tags: string | null
    roles: string | null
    description: string | null
    start: Date | null
    end: Date | null
    endSubscription: Date | null
    coleaderId: string | null
    ownerId: string | null
    badge: string | null
    blockedSubscription: boolean | null
    status: string | null
    feedback: string | null
  }

  export type ProjectCountAggregateOutputType = {
    projectId: number
    name: number
    createdAt: number
    updatedAt: number
    tags: number
    roles: number
    description: number
    start: number
    end: number
    endSubscription: number
    coleaderId: number
    ownerId: number
    badge: number
    blockedSubscription: number
    status: number
    feedback: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    projectId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    tags?: true
    roles?: true
    description?: true
    start?: true
    end?: true
    endSubscription?: true
    coleaderId?: true
    ownerId?: true
    badge?: true
    blockedSubscription?: true
    status?: true
    feedback?: true
  }

  export type ProjectMaxAggregateInputType = {
    projectId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    tags?: true
    roles?: true
    description?: true
    start?: true
    end?: true
    endSubscription?: true
    coleaderId?: true
    ownerId?: true
    badge?: true
    blockedSubscription?: true
    status?: true
    feedback?: true
  }

  export type ProjectCountAggregateInputType = {
    projectId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    tags?: true
    roles?: true
    description?: true
    start?: true
    end?: true
    endSubscription?: true
    coleaderId?: true
    ownerId?: true
    badge?: true
    blockedSubscription?: true
    status?: true
    feedback?: true
    _all?: true
  }

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: ProjectScalarFieldEnum[]
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    projectId: string
    name: string
    createdAt: Date
    updatedAt: Date
    tags: string
    roles: string
    description: string
    start: Date
    end: Date
    endSubscription: Date
    coleaderId: string | null
    ownerId: string
    badge: string
    blockedSubscription: boolean
    status: string
    feedback: string | null
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect = {
    projectId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tags?: boolean
    roles?: boolean
    description?: boolean
    start?: boolean
    end?: boolean
    endSubscription?: boolean
    coleaderId?: boolean
    ownerId?: boolean
    badge?: boolean
    blockedSubscription?: boolean
    status?: boolean
    feedback?: boolean
    applies?: boolean | Project$appliesArgs
    coleader?: boolean | UserArgs
    owner?: boolean | UserArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }


  export type ProjectInclude = {
    applies?: boolean | Project$appliesArgs
    coleader?: boolean | UserArgs
    owner?: boolean | UserArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectGetPayload<S extends boolean | null | undefined | ProjectArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Project :
    S extends undefined ? never :
    S extends { include: any } & (ProjectArgs | ProjectFindManyArgs)
    ? Project  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'applies' ? Array < ApplyGetPayload<S['include'][P]>>  :
        P extends 'coleader' ? UserGetPayload<S['include'][P]> | null :
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProjectArgs | ProjectFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'applies' ? Array < ApplyGetPayload<S['select'][P]>>  :
        P extends 'coleader' ? UserGetPayload<S['select'][P]> | null :
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Project ? Project[P] : never
  } 
      : Project


  type ProjectCountArgs = 
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? Prisma__ProjectClient<ProjectGetPayload<T>> : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? Prisma__ProjectClient<ProjectGetPayload<T>> : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>

    /**
     * Find the first Project that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const projectWithProjectIdOnly = await prisma.project.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProjectGetPayload<T>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    applies<T extends Project$appliesArgs= {}>(args?: Subset<T, Project$appliesArgs>): Prisma.PrismaPromise<Array<ApplyGetPayload<T>>| Null>;

    coleader<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Project base type for findUnique actions
   */
  export type ProjectFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUnique
   */
  export interface ProjectFindUniqueArgs extends ProjectFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project base type for findFirst actions
   */
  export type ProjectFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }

  /**
   * Project findFirst
   */
  export interface ProjectFindFirstArgs extends ProjectFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }


  /**
   * Project.applies
   */
  export type Project$appliesArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    where?: ApplyWhereInput
    orderBy?: Enumerable<ApplyOrderByWithRelationInput>
    cursor?: ApplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApplyScalarFieldEnum>
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
  }



  /**
   * Model Tags
   */


  export type AggregateTags = {
    _count: TagsCountAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  export type TagsMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TagsMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TagsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TagsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagsAggregateArgs = {
    /**
     * Filter which Tags to aggregate.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsMaxAggregateInputType
  }

  export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTags[P]>
      : GetScalarType<T[P], AggregateTags[P]>
  }




  export type TagsGroupByArgs = {
    where?: TagsWhereInput
    orderBy?: Enumerable<TagsOrderByWithAggregationInput>
    by: TagsScalarFieldEnum[]
    having?: TagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsCountAggregateInputType | true
    _min?: TagsMinAggregateInputType
    _max?: TagsMaxAggregateInputType
  }


  export type TagsGroupByOutputType = {
    id: string
    name: string
    _count: TagsCountAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  type GetTagsGroupByPayload<T extends TagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsGroupByOutputType[P]>
            : GetScalarType<T[P], TagsGroupByOutputType[P]>
        }
      >
    >


  export type TagsSelect = {
    id?: boolean
    name?: boolean
  }


  export type TagsGetPayload<S extends boolean | null | undefined | TagsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Tags :
    S extends undefined ? never :
    S extends { include: any } & (TagsArgs | TagsFindManyArgs)
    ? Tags 
    : S extends { select: any } & (TagsArgs | TagsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Tags ? Tags[P] : never
  } 
      : Tags


  type TagsCountArgs = 
    Omit<TagsFindManyArgs, 'select' | 'include'> & {
      select?: TagsCountAggregateInputType | true
    }

  export interface TagsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Tags that matches the filter.
     * @param {TagsFindUniqueArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tags'> extends True ? Prisma__TagsClient<TagsGetPayload<T>> : Prisma__TagsClient<TagsGetPayload<T> | null, null>

    /**
     * Find one Tags that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TagsFindUniqueOrThrowArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Find the first Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tags'> extends True ? Prisma__TagsClient<TagsGetPayload<T>> : Prisma__TagsClient<TagsGetPayload<T> | null, null>

    /**
     * Find the first Tags that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TagsFindFirstOrThrowArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tags.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagsFindManyArgs>(
      args?: SelectSubset<T, TagsFindManyArgs>
    ): Prisma.PrismaPromise<Array<TagsGetPayload<T>>>

    /**
     * Create a Tags.
     * @param {TagsCreateArgs} args - Arguments to create a Tags.
     * @example
     * // Create one Tags
     * const Tags = await prisma.tags.create({
     *   data: {
     *     // ... data to create a Tags
     *   }
     * })
     * 
    **/
    create<T extends TagsCreateArgs>(
      args: SelectSubset<T, TagsCreateArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Delete a Tags.
     * @param {TagsDeleteArgs} args - Arguments to delete one Tags.
     * @example
     * // Delete one Tags
     * const Tags = await prisma.tags.delete({
     *   where: {
     *     // ... filter to delete one Tags
     *   }
     * })
     * 
    **/
    delete<T extends TagsDeleteArgs>(
      args: SelectSubset<T, TagsDeleteArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Update one Tags.
     * @param {TagsUpdateArgs} args - Arguments to update one Tags.
     * @example
     * // Update one Tags
     * const tags = await prisma.tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagsUpdateArgs>(
      args: SelectSubset<T, TagsUpdateArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Delete zero or more Tags.
     * @param {TagsDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagsDeleteManyArgs>(
      args?: SelectSubset<T, TagsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagsUpdateManyArgs>(
      args: SelectSubset<T, TagsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tags.
     * @param {TagsUpsertArgs} args - Arguments to update or create a Tags.
     * @example
     * // Update or create a Tags
     * const tags = await prisma.tags.upsert({
     *   create: {
     *     // ... data to create a Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tags we want to update
     *   }
     * })
    **/
    upsert<T extends TagsUpsertArgs>(
      args: SelectSubset<T, TagsUpsertArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tags.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagsCountArgs>(
      args?: Subset<T, TagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsAggregateArgs>(args: Subset<T, TagsAggregateArgs>): Prisma.PrismaPromise<GetTagsAggregateType<T>>

    /**
     * Group by Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsGroupByArgs['orderBy'] }
        : { orderBy?: TagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tags base type for findUnique actions
   */
  export type TagsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * Filter, which Tags to fetch.
     */
    where: TagsWhereUniqueInput
  }

  /**
   * Tags findUnique
   */
  export interface TagsFindUniqueArgs extends TagsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tags findUniqueOrThrow
   */
  export type TagsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * Filter, which Tags to fetch.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags base type for findFirst actions
   */
  export type TagsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: Enumerable<TagsScalarFieldEnum>
  }

  /**
   * Tags findFirst
   */
  export interface TagsFindFirstArgs extends TagsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tags findFirstOrThrow
   */
  export type TagsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: Enumerable<TagsScalarFieldEnum>
  }


  /**
   * Tags findMany
   */
  export type TagsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: Enumerable<TagsScalarFieldEnum>
  }


  /**
   * Tags create
   */
  export type TagsCreateArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * The data needed to create a Tags.
     */
    data: XOR<TagsCreateInput, TagsUncheckedCreateInput>
  }


  /**
   * Tags update
   */
  export type TagsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * The data needed to update a Tags.
     */
    data: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
    /**
     * Choose, which Tags to update.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags updateMany
   */
  export type TagsUpdateManyArgs = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagsUpdateManyMutationInput, TagsUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagsWhereInput
  }


  /**
   * Tags upsert
   */
  export type TagsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * The filter to search for the Tags to update in case it exists.
     */
    where: TagsWhereUniqueInput
    /**
     * In case the Tags found by the `where` argument doesn't exist, create a new Tags with this data.
     */
    create: XOR<TagsCreateInput, TagsUncheckedCreateInput>
    /**
     * In case the Tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
  }


  /**
   * Tags delete
   */
  export type TagsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
    /**
     * Filter which Tags to delete.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags deleteMany
   */
  export type TagsDeleteManyArgs = {
    /**
     * Filter which Tags to delete
     */
    where?: TagsWhereInput
  }


  /**
   * Tags without action
   */
  export type TagsArgs = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    points: number | null
  }

  export type UserSumAggregateOutputType = {
    points: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    bornDate: Date | null
    gender: string | null
    n_dell: string | null
    managerId: string | null
    highligths: string | null
    points: number | null
    habilities: string | null
    isAdmin: boolean | null
    photoURL: string | null
    area: string | null
    linkedin: string | null
    createdAt: Date | null
    updatedAt: Date | null
    code: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    bornDate: Date | null
    gender: string | null
    n_dell: string | null
    managerId: string | null
    highligths: string | null
    points: number | null
    habilities: string | null
    isAdmin: boolean | null
    photoURL: string | null
    area: string | null
    linkedin: string | null
    createdAt: Date | null
    updatedAt: Date | null
    code: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    bornDate: number
    gender: number
    n_dell: number
    managerId: number
    highligths: number
    points: number
    habilities: number
    isAdmin: number
    photoURL: number
    area: number
    linkedin: number
    createdAt: number
    updatedAt: number
    code: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    points?: true
  }

  export type UserSumAggregateInputType = {
    points?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    bornDate?: true
    gender?: true
    n_dell?: true
    managerId?: true
    highligths?: true
    points?: true
    habilities?: true
    isAdmin?: true
    photoURL?: true
    area?: true
    linkedin?: true
    createdAt?: true
    updatedAt?: true
    code?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    bornDate?: true
    gender?: true
    n_dell?: true
    managerId?: true
    highligths?: true
    points?: true
    habilities?: true
    isAdmin?: true
    photoURL?: true
    area?: true
    linkedin?: true
    createdAt?: true
    updatedAt?: true
    code?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    bornDate?: true
    gender?: true
    n_dell?: true
    managerId?: true
    highligths?: true
    points?: true
    habilities?: true
    isAdmin?: true
    photoURL?: true
    area?: true
    linkedin?: true
    createdAt?: true
    updatedAt?: true
    code?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    bornDate: Date
    gender: string
    n_dell: string
    managerId: string
    highligths: string
    points: number
    habilities: string
    isAdmin: boolean
    photoURL: string | null
    area: string
    linkedin: string | null
    createdAt: Date
    updatedAt: Date
    code: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    bornDate?: boolean
    gender?: boolean
    n_dell?: boolean
    managerId?: boolean
    highligths?: boolean
    points?: boolean
    habilities?: boolean
    isAdmin?: boolean
    photoURL?: boolean
    area?: boolean
    linkedin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    code?: boolean
    projects?: boolean | User$projectsArgs
    projectsColeader?: boolean | User$projectsColeaderArgs
    applies?: boolean | User$appliesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    projects?: boolean | User$projectsArgs
    projectsColeader?: boolean | User$projectsColeaderArgs
    applies?: boolean | User$appliesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'projects' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends 'projectsColeader' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends 'applies' ? Array < ApplyGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'projects' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends 'projectsColeader' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends 'applies' ? Array < ApplyGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    projects<T extends User$projectsArgs= {}>(args?: Subset<T, User$projectsArgs>): Prisma.PrismaPromise<Array<ProjectGetPayload<T>>| Null>;

    projectsColeader<T extends User$projectsColeaderArgs= {}>(args?: Subset<T, User$projectsColeaderArgs>): Prisma.PrismaPromise<Array<ProjectGetPayload<T>>| Null>;

    applies<T extends User$appliesArgs= {}>(args?: Subset<T, User$appliesArgs>): Prisma.PrismaPromise<Array<ApplyGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.projects
   */
  export type User$projectsArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * User.projectsColeader
   */
  export type User$projectsColeaderArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * User.applies
   */
  export type User$appliesArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    where?: ApplyWhereInput
    orderBy?: Enumerable<ApplyOrderByWithRelationInput>
    cursor?: ApplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApplyScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Habilitie
   */


  export type AggregateHabilitie = {
    _count: HabilitieCountAggregateOutputType | null
    _min: HabilitieMinAggregateOutputType | null
    _max: HabilitieMaxAggregateOutputType | null
  }

  export type HabilitieMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type HabilitieMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type HabilitieCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type HabilitieMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type HabilitieMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type HabilitieCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type HabilitieAggregateArgs = {
    /**
     * Filter which Habilitie to aggregate.
     */
    where?: HabilitieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: Enumerable<HabilitieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HabilitieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Habilities
    **/
    _count?: true | HabilitieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabilitieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabilitieMaxAggregateInputType
  }

  export type GetHabilitieAggregateType<T extends HabilitieAggregateArgs> = {
        [P in keyof T & keyof AggregateHabilitie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabilitie[P]>
      : GetScalarType<T[P], AggregateHabilitie[P]>
  }




  export type HabilitieGroupByArgs = {
    where?: HabilitieWhereInput
    orderBy?: Enumerable<HabilitieOrderByWithAggregationInput>
    by: HabilitieScalarFieldEnum[]
    having?: HabilitieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabilitieCountAggregateInputType | true
    _min?: HabilitieMinAggregateInputType
    _max?: HabilitieMaxAggregateInputType
  }


  export type HabilitieGroupByOutputType = {
    id: string
    name: string
    _count: HabilitieCountAggregateOutputType | null
    _min: HabilitieMinAggregateOutputType | null
    _max: HabilitieMaxAggregateOutputType | null
  }

  type GetHabilitieGroupByPayload<T extends HabilitieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HabilitieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabilitieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabilitieGroupByOutputType[P]>
            : GetScalarType<T[P], HabilitieGroupByOutputType[P]>
        }
      >
    >


  export type HabilitieSelect = {
    id?: boolean
    name?: boolean
  }


  export type HabilitieGetPayload<S extends boolean | null | undefined | HabilitieArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Habilitie :
    S extends undefined ? never :
    S extends { include: any } & (HabilitieArgs | HabilitieFindManyArgs)
    ? Habilitie 
    : S extends { select: any } & (HabilitieArgs | HabilitieFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Habilitie ? Habilitie[P] : never
  } 
      : Habilitie


  type HabilitieCountArgs = 
    Omit<HabilitieFindManyArgs, 'select' | 'include'> & {
      select?: HabilitieCountAggregateInputType | true
    }

  export interface HabilitieDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Habilitie that matches the filter.
     * @param {HabilitieFindUniqueArgs} args - Arguments to find a Habilitie
     * @example
     * // Get one Habilitie
     * const habilitie = await prisma.habilitie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HabilitieFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HabilitieFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Habilitie'> extends True ? Prisma__HabilitieClient<HabilitieGetPayload<T>> : Prisma__HabilitieClient<HabilitieGetPayload<T> | null, null>

    /**
     * Find one Habilitie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HabilitieFindUniqueOrThrowArgs} args - Arguments to find a Habilitie
     * @example
     * // Get one Habilitie
     * const habilitie = await prisma.habilitie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HabilitieFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HabilitieFindUniqueOrThrowArgs>
    ): Prisma__HabilitieClient<HabilitieGetPayload<T>>

    /**
     * Find the first Habilitie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieFindFirstArgs} args - Arguments to find a Habilitie
     * @example
     * // Get one Habilitie
     * const habilitie = await prisma.habilitie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HabilitieFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HabilitieFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Habilitie'> extends True ? Prisma__HabilitieClient<HabilitieGetPayload<T>> : Prisma__HabilitieClient<HabilitieGetPayload<T> | null, null>

    /**
     * Find the first Habilitie that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieFindFirstOrThrowArgs} args - Arguments to find a Habilitie
     * @example
     * // Get one Habilitie
     * const habilitie = await prisma.habilitie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HabilitieFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HabilitieFindFirstOrThrowArgs>
    ): Prisma__HabilitieClient<HabilitieGetPayload<T>>

    /**
     * Find zero or more Habilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habilities
     * const habilities = await prisma.habilitie.findMany()
     * 
     * // Get first 10 Habilities
     * const habilities = await prisma.habilitie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habilitieWithIdOnly = await prisma.habilitie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HabilitieFindManyArgs>(
      args?: SelectSubset<T, HabilitieFindManyArgs>
    ): Prisma.PrismaPromise<Array<HabilitieGetPayload<T>>>

    /**
     * Create a Habilitie.
     * @param {HabilitieCreateArgs} args - Arguments to create a Habilitie.
     * @example
     * // Create one Habilitie
     * const Habilitie = await prisma.habilitie.create({
     *   data: {
     *     // ... data to create a Habilitie
     *   }
     * })
     * 
    **/
    create<T extends HabilitieCreateArgs>(
      args: SelectSubset<T, HabilitieCreateArgs>
    ): Prisma__HabilitieClient<HabilitieGetPayload<T>>

    /**
     * Delete a Habilitie.
     * @param {HabilitieDeleteArgs} args - Arguments to delete one Habilitie.
     * @example
     * // Delete one Habilitie
     * const Habilitie = await prisma.habilitie.delete({
     *   where: {
     *     // ... filter to delete one Habilitie
     *   }
     * })
     * 
    **/
    delete<T extends HabilitieDeleteArgs>(
      args: SelectSubset<T, HabilitieDeleteArgs>
    ): Prisma__HabilitieClient<HabilitieGetPayload<T>>

    /**
     * Update one Habilitie.
     * @param {HabilitieUpdateArgs} args - Arguments to update one Habilitie.
     * @example
     * // Update one Habilitie
     * const habilitie = await prisma.habilitie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HabilitieUpdateArgs>(
      args: SelectSubset<T, HabilitieUpdateArgs>
    ): Prisma__HabilitieClient<HabilitieGetPayload<T>>

    /**
     * Delete zero or more Habilities.
     * @param {HabilitieDeleteManyArgs} args - Arguments to filter Habilities to delete.
     * @example
     * // Delete a few Habilities
     * const { count } = await prisma.habilitie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HabilitieDeleteManyArgs>(
      args?: SelectSubset<T, HabilitieDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habilities
     * const habilitie = await prisma.habilitie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HabilitieUpdateManyArgs>(
      args: SelectSubset<T, HabilitieUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Habilitie.
     * @param {HabilitieUpsertArgs} args - Arguments to update or create a Habilitie.
     * @example
     * // Update or create a Habilitie
     * const habilitie = await prisma.habilitie.upsert({
     *   create: {
     *     // ... data to create a Habilitie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habilitie we want to update
     *   }
     * })
    **/
    upsert<T extends HabilitieUpsertArgs>(
      args: SelectSubset<T, HabilitieUpsertArgs>
    ): Prisma__HabilitieClient<HabilitieGetPayload<T>>

    /**
     * Count the number of Habilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieCountArgs} args - Arguments to filter Habilities to count.
     * @example
     * // Count the number of Habilities
     * const count = await prisma.habilitie.count({
     *   where: {
     *     // ... the filter for the Habilities we want to count
     *   }
     * })
    **/
    count<T extends HabilitieCountArgs>(
      args?: Subset<T, HabilitieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabilitieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habilitie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabilitieAggregateArgs>(args: Subset<T, HabilitieAggregateArgs>): Prisma.PrismaPromise<GetHabilitieAggregateType<T>>

    /**
     * Group by Habilitie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabilitieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabilitieGroupByArgs['orderBy'] }
        : { orderBy?: HabilitieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabilitieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabilitieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Habilitie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HabilitieClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Habilitie base type for findUnique actions
   */
  export type HabilitieFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * Filter, which Habilitie to fetch.
     */
    where: HabilitieWhereUniqueInput
  }

  /**
   * Habilitie findUnique
   */
  export interface HabilitieFindUniqueArgs extends HabilitieFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Habilitie findUniqueOrThrow
   */
  export type HabilitieFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * Filter, which Habilitie to fetch.
     */
    where: HabilitieWhereUniqueInput
  }


  /**
   * Habilitie base type for findFirst actions
   */
  export type HabilitieFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * Filter, which Habilitie to fetch.
     */
    where?: HabilitieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: Enumerable<HabilitieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habilities.
     */
    cursor?: HabilitieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habilities.
     */
    distinct?: Enumerable<HabilitieScalarFieldEnum>
  }

  /**
   * Habilitie findFirst
   */
  export interface HabilitieFindFirstArgs extends HabilitieFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Habilitie findFirstOrThrow
   */
  export type HabilitieFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * Filter, which Habilitie to fetch.
     */
    where?: HabilitieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: Enumerable<HabilitieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habilities.
     */
    cursor?: HabilitieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habilities.
     */
    distinct?: Enumerable<HabilitieScalarFieldEnum>
  }


  /**
   * Habilitie findMany
   */
  export type HabilitieFindManyArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * Filter, which Habilities to fetch.
     */
    where?: HabilitieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: Enumerable<HabilitieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Habilities.
     */
    cursor?: HabilitieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    distinct?: Enumerable<HabilitieScalarFieldEnum>
  }


  /**
   * Habilitie create
   */
  export type HabilitieCreateArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * The data needed to create a Habilitie.
     */
    data: XOR<HabilitieCreateInput, HabilitieUncheckedCreateInput>
  }


  /**
   * Habilitie update
   */
  export type HabilitieUpdateArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * The data needed to update a Habilitie.
     */
    data: XOR<HabilitieUpdateInput, HabilitieUncheckedUpdateInput>
    /**
     * Choose, which Habilitie to update.
     */
    where: HabilitieWhereUniqueInput
  }


  /**
   * Habilitie updateMany
   */
  export type HabilitieUpdateManyArgs = {
    /**
     * The data used to update Habilities.
     */
    data: XOR<HabilitieUpdateManyMutationInput, HabilitieUncheckedUpdateManyInput>
    /**
     * Filter which Habilities to update
     */
    where?: HabilitieWhereInput
  }


  /**
   * Habilitie upsert
   */
  export type HabilitieUpsertArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * The filter to search for the Habilitie to update in case it exists.
     */
    where: HabilitieWhereUniqueInput
    /**
     * In case the Habilitie found by the `where` argument doesn't exist, create a new Habilitie with this data.
     */
    create: XOR<HabilitieCreateInput, HabilitieUncheckedCreateInput>
    /**
     * In case the Habilitie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HabilitieUpdateInput, HabilitieUncheckedUpdateInput>
  }


  /**
   * Habilitie delete
   */
  export type HabilitieDeleteArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
    /**
     * Filter which Habilitie to delete.
     */
    where: HabilitieWhereUniqueInput
  }


  /**
   * Habilitie deleteMany
   */
  export type HabilitieDeleteManyArgs = {
    /**
     * Filter which Habilities to delete
     */
    where?: HabilitieWhereInput
  }


  /**
   * Habilitie without action
   */
  export type HabilitieArgs = {
    /**
     * Select specific fields to fetch from the Habilitie
     */
    select?: HabilitieSelect | null
  }



  /**
   * Model Apply
   */


  export type AggregateApply = {
    _count: ApplyCountAggregateOutputType | null
    _min: ApplyMinAggregateOutputType | null
    _max: ApplyMaxAggregateOutputType | null
  }

  export type ApplyMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    offerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    why: string | null
    habilities: string | null
    feedback: string | null
    isAccepted: boolean | null
  }

  export type ApplyMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    offerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    why: string | null
    habilities: string | null
    feedback: string | null
    isAccepted: boolean | null
  }

  export type ApplyCountAggregateOutputType = {
    id: number
    projectId: number
    userId: number
    offerName: number
    createdAt: number
    updatedAt: number
    status: number
    why: number
    habilities: number
    feedback: number
    isAccepted: number
    _all: number
  }


  export type ApplyMinAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    offerName?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    why?: true
    habilities?: true
    feedback?: true
    isAccepted?: true
  }

  export type ApplyMaxAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    offerName?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    why?: true
    habilities?: true
    feedback?: true
    isAccepted?: true
  }

  export type ApplyCountAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    offerName?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    why?: true
    habilities?: true
    feedback?: true
    isAccepted?: true
    _all?: true
  }

  export type ApplyAggregateArgs = {
    /**
     * Filter which Apply to aggregate.
     */
    where?: ApplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applies to fetch.
     */
    orderBy?: Enumerable<ApplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applies
    **/
    _count?: true | ApplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplyMaxAggregateInputType
  }

  export type GetApplyAggregateType<T extends ApplyAggregateArgs> = {
        [P in keyof T & keyof AggregateApply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApply[P]>
      : GetScalarType<T[P], AggregateApply[P]>
  }




  export type ApplyGroupByArgs = {
    where?: ApplyWhereInput
    orderBy?: Enumerable<ApplyOrderByWithAggregationInput>
    by: ApplyScalarFieldEnum[]
    having?: ApplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplyCountAggregateInputType | true
    _min?: ApplyMinAggregateInputType
    _max?: ApplyMaxAggregateInputType
  }


  export type ApplyGroupByOutputType = {
    id: string
    projectId: string
    userId: string
    offerName: string
    createdAt: Date
    updatedAt: Date
    status: string
    why: string | null
    habilities: string | null
    feedback: string | null
    isAccepted: boolean
    _count: ApplyCountAggregateOutputType | null
    _min: ApplyMinAggregateOutputType | null
    _max: ApplyMaxAggregateOutputType | null
  }

  type GetApplyGroupByPayload<T extends ApplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ApplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplyGroupByOutputType[P]>
            : GetScalarType<T[P], ApplyGroupByOutputType[P]>
        }
      >
    >


  export type ApplySelect = {
    id?: boolean
    projectId?: boolean
    userId?: boolean
    offerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    why?: boolean
    habilities?: boolean
    feedback?: boolean
    isAccepted?: boolean
    project?: boolean | ProjectArgs
    user?: boolean | UserArgs
  }


  export type ApplyInclude = {
    project?: boolean | ProjectArgs
    user?: boolean | UserArgs
  }

  export type ApplyGetPayload<S extends boolean | null | undefined | ApplyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Apply :
    S extends undefined ? never :
    S extends { include: any } & (ApplyArgs | ApplyFindManyArgs)
    ? Apply  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'project' ? ProjectGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ApplyArgs | ApplyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'project' ? ProjectGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Apply ? Apply[P] : never
  } 
      : Apply


  type ApplyCountArgs = 
    Omit<ApplyFindManyArgs, 'select' | 'include'> & {
      select?: ApplyCountAggregateInputType | true
    }

  export interface ApplyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Apply that matches the filter.
     * @param {ApplyFindUniqueArgs} args - Arguments to find a Apply
     * @example
     * // Get one Apply
     * const apply = await prisma.apply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApplyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Apply'> extends True ? Prisma__ApplyClient<ApplyGetPayload<T>> : Prisma__ApplyClient<ApplyGetPayload<T> | null, null>

    /**
     * Find one Apply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplyFindUniqueOrThrowArgs} args - Arguments to find a Apply
     * @example
     * // Get one Apply
     * const apply = await prisma.apply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ApplyFindUniqueOrThrowArgs>
    ): Prisma__ApplyClient<ApplyGetPayload<T>>

    /**
     * Find the first Apply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyFindFirstArgs} args - Arguments to find a Apply
     * @example
     * // Get one Apply
     * const apply = await prisma.apply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApplyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Apply'> extends True ? Prisma__ApplyClient<ApplyGetPayload<T>> : Prisma__ApplyClient<ApplyGetPayload<T> | null, null>

    /**
     * Find the first Apply that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyFindFirstOrThrowArgs} args - Arguments to find a Apply
     * @example
     * // Get one Apply
     * const apply = await prisma.apply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ApplyFindFirstOrThrowArgs>
    ): Prisma__ApplyClient<ApplyGetPayload<T>>

    /**
     * Find zero or more Applies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applies
     * const applies = await prisma.apply.findMany()
     * 
     * // Get first 10 Applies
     * const applies = await prisma.apply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applyWithIdOnly = await prisma.apply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplyFindManyArgs>(
      args?: SelectSubset<T, ApplyFindManyArgs>
    ): Prisma.PrismaPromise<Array<ApplyGetPayload<T>>>

    /**
     * Create a Apply.
     * @param {ApplyCreateArgs} args - Arguments to create a Apply.
     * @example
     * // Create one Apply
     * const Apply = await prisma.apply.create({
     *   data: {
     *     // ... data to create a Apply
     *   }
     * })
     * 
    **/
    create<T extends ApplyCreateArgs>(
      args: SelectSubset<T, ApplyCreateArgs>
    ): Prisma__ApplyClient<ApplyGetPayload<T>>

    /**
     * Delete a Apply.
     * @param {ApplyDeleteArgs} args - Arguments to delete one Apply.
     * @example
     * // Delete one Apply
     * const Apply = await prisma.apply.delete({
     *   where: {
     *     // ... filter to delete one Apply
     *   }
     * })
     * 
    **/
    delete<T extends ApplyDeleteArgs>(
      args: SelectSubset<T, ApplyDeleteArgs>
    ): Prisma__ApplyClient<ApplyGetPayload<T>>

    /**
     * Update one Apply.
     * @param {ApplyUpdateArgs} args - Arguments to update one Apply.
     * @example
     * // Update one Apply
     * const apply = await prisma.apply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplyUpdateArgs>(
      args: SelectSubset<T, ApplyUpdateArgs>
    ): Prisma__ApplyClient<ApplyGetPayload<T>>

    /**
     * Delete zero or more Applies.
     * @param {ApplyDeleteManyArgs} args - Arguments to filter Applies to delete.
     * @example
     * // Delete a few Applies
     * const { count } = await prisma.apply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplyDeleteManyArgs>(
      args?: SelectSubset<T, ApplyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applies
     * const apply = await prisma.apply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplyUpdateManyArgs>(
      args: SelectSubset<T, ApplyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Apply.
     * @param {ApplyUpsertArgs} args - Arguments to update or create a Apply.
     * @example
     * // Update or create a Apply
     * const apply = await prisma.apply.upsert({
     *   create: {
     *     // ... data to create a Apply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Apply we want to update
     *   }
     * })
    **/
    upsert<T extends ApplyUpsertArgs>(
      args: SelectSubset<T, ApplyUpsertArgs>
    ): Prisma__ApplyClient<ApplyGetPayload<T>>

    /**
     * Count the number of Applies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyCountArgs} args - Arguments to filter Applies to count.
     * @example
     * // Count the number of Applies
     * const count = await prisma.apply.count({
     *   where: {
     *     // ... the filter for the Applies we want to count
     *   }
     * })
    **/
    count<T extends ApplyCountArgs>(
      args?: Subset<T, ApplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Apply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplyAggregateArgs>(args: Subset<T, ApplyAggregateArgs>): Prisma.PrismaPromise<GetApplyAggregateType<T>>

    /**
     * Group by Apply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplyGroupByArgs['orderBy'] }
        : { orderBy?: ApplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Apply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApplyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    project<T extends ProjectArgs= {}>(args?: Subset<T, ProjectArgs>): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Apply base type for findUnique actions
   */
  export type ApplyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * Filter, which Apply to fetch.
     */
    where: ApplyWhereUniqueInput
  }

  /**
   * Apply findUnique
   */
  export interface ApplyFindUniqueArgs extends ApplyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Apply findUniqueOrThrow
   */
  export type ApplyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * Filter, which Apply to fetch.
     */
    where: ApplyWhereUniqueInput
  }


  /**
   * Apply base type for findFirst actions
   */
  export type ApplyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * Filter, which Apply to fetch.
     */
    where?: ApplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applies to fetch.
     */
    orderBy?: Enumerable<ApplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applies.
     */
    cursor?: ApplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applies.
     */
    distinct?: Enumerable<ApplyScalarFieldEnum>
  }

  /**
   * Apply findFirst
   */
  export interface ApplyFindFirstArgs extends ApplyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Apply findFirstOrThrow
   */
  export type ApplyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * Filter, which Apply to fetch.
     */
    where?: ApplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applies to fetch.
     */
    orderBy?: Enumerable<ApplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applies.
     */
    cursor?: ApplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applies.
     */
    distinct?: Enumerable<ApplyScalarFieldEnum>
  }


  /**
   * Apply findMany
   */
  export type ApplyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * Filter, which Applies to fetch.
     */
    where?: ApplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applies to fetch.
     */
    orderBy?: Enumerable<ApplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applies.
     */
    cursor?: ApplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applies.
     */
    skip?: number
    distinct?: Enumerable<ApplyScalarFieldEnum>
  }


  /**
   * Apply create
   */
  export type ApplyCreateArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * The data needed to create a Apply.
     */
    data: XOR<ApplyCreateInput, ApplyUncheckedCreateInput>
  }


  /**
   * Apply update
   */
  export type ApplyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * The data needed to update a Apply.
     */
    data: XOR<ApplyUpdateInput, ApplyUncheckedUpdateInput>
    /**
     * Choose, which Apply to update.
     */
    where: ApplyWhereUniqueInput
  }


  /**
   * Apply updateMany
   */
  export type ApplyUpdateManyArgs = {
    /**
     * The data used to update Applies.
     */
    data: XOR<ApplyUpdateManyMutationInput, ApplyUncheckedUpdateManyInput>
    /**
     * Filter which Applies to update
     */
    where?: ApplyWhereInput
  }


  /**
   * Apply upsert
   */
  export type ApplyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * The filter to search for the Apply to update in case it exists.
     */
    where: ApplyWhereUniqueInput
    /**
     * In case the Apply found by the `where` argument doesn't exist, create a new Apply with this data.
     */
    create: XOR<ApplyCreateInput, ApplyUncheckedCreateInput>
    /**
     * In case the Apply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplyUpdateInput, ApplyUncheckedUpdateInput>
  }


  /**
   * Apply delete
   */
  export type ApplyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
    /**
     * Filter which Apply to delete.
     */
    where: ApplyWhereUniqueInput
  }


  /**
   * Apply deleteMany
   */
  export type ApplyDeleteManyArgs = {
    /**
     * Filter which Applies to delete
     */
    where?: ApplyWhereInput
  }


  /**
   * Apply without action
   */
  export type ApplyArgs = {
    /**
     * Select specific fields to fetch from the Apply
     */
    select?: ApplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplyInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ApplyScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    userId: 'userId',
    offerName: 'offerName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    why: 'why',
    habilities: 'habilities',
    feedback: 'feedback',
    isAccepted: 'isAccepted'
  };

  export type ApplyScalarFieldEnum = (typeof ApplyScalarFieldEnum)[keyof typeof ApplyScalarFieldEnum]


  export const HabilitieScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type HabilitieScalarFieldEnum = (typeof HabilitieScalarFieldEnum)[keyof typeof HabilitieScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    projectId: 'projectId',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tags: 'tags',
    roles: 'roles',
    description: 'description',
    start: 'start',
    end: 'end',
    endSubscription: 'endSubscription',
    coleaderId: 'coleaderId',
    ownerId: 'ownerId',
    badge: 'badge',
    blockedSubscription: 'blockedSubscription',
    status: 'status',
    feedback: 'feedback'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TagsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagsScalarFieldEnum = (typeof TagsScalarFieldEnum)[keyof typeof TagsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    bornDate: 'bornDate',
    gender: 'gender',
    n_dell: 'n_dell',
    managerId: 'managerId',
    highligths: 'highligths',
    points: 'points',
    habilities: 'habilities',
    isAdmin: 'isAdmin',
    photoURL: 'photoURL',
    area: 'area',
    linkedin: 'linkedin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    code: 'code'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    projectId?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tags?: StringFilter | string
    roles?: StringFilter | string
    description?: StringFilter | string
    start?: DateTimeFilter | Date | string
    end?: DateTimeFilter | Date | string
    endSubscription?: DateTimeFilter | Date | string
    coleaderId?: StringNullableFilter | string | null
    ownerId?: StringFilter | string
    badge?: StringFilter | string
    blockedSubscription?: BoolFilter | boolean
    status?: StringFilter | string
    feedback?: StringNullableFilter | string | null
    applies?: ApplyListRelationFilter
    coleader?: XOR<UserRelationFilter, UserWhereInput> | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProjectOrderByWithRelationInput = {
    projectId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tags?: SortOrder
    roles?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    endSubscription?: SortOrder
    coleaderId?: SortOrder
    ownerId?: SortOrder
    badge?: SortOrder
    blockedSubscription?: SortOrder
    status?: SortOrder
    feedback?: SortOrder
    applies?: ApplyOrderByRelationAggregateInput
    coleader?: UserOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
  }

  export type ProjectWhereUniqueInput = {
    projectId?: string
  }

  export type ProjectOrderByWithAggregationInput = {
    projectId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tags?: SortOrder
    roles?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    endSubscription?: SortOrder
    coleaderId?: SortOrder
    ownerId?: SortOrder
    badge?: SortOrder
    blockedSubscription?: SortOrder
    status?: SortOrder
    feedback?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    projectId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    tags?: StringWithAggregatesFilter | string
    roles?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    start?: DateTimeWithAggregatesFilter | Date | string
    end?: DateTimeWithAggregatesFilter | Date | string
    endSubscription?: DateTimeWithAggregatesFilter | Date | string
    coleaderId?: StringNullableWithAggregatesFilter | string | null
    ownerId?: StringWithAggregatesFilter | string
    badge?: StringWithAggregatesFilter | string
    blockedSubscription?: BoolWithAggregatesFilter | boolean
    status?: StringWithAggregatesFilter | string
    feedback?: StringNullableWithAggregatesFilter | string | null
  }

  export type TagsWhereInput = {
    AND?: Enumerable<TagsWhereInput>
    OR?: Enumerable<TagsWhereInput>
    NOT?: Enumerable<TagsWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
  }

  export type TagsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagsWhereUniqueInput = {
    id?: string
  }

  export type TagsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TagsCountOrderByAggregateInput
    _max?: TagsMaxOrderByAggregateInput
    _min?: TagsMinOrderByAggregateInput
  }

  export type TagsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    password?: StringFilter | string
    bornDate?: DateTimeFilter | Date | string
    gender?: StringFilter | string
    n_dell?: StringFilter | string
    managerId?: StringFilter | string
    highligths?: StringFilter | string
    points?: IntFilter | number
    habilities?: StringFilter | string
    isAdmin?: BoolFilter | boolean
    photoURL?: StringNullableFilter | string | null
    area?: StringFilter | string
    linkedin?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    code?: StringNullableFilter | string | null
    projects?: ProjectListRelationFilter
    projectsColeader?: ProjectListRelationFilter
    applies?: ApplyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    bornDate?: SortOrder
    gender?: SortOrder
    n_dell?: SortOrder
    managerId?: SortOrder
    highligths?: SortOrder
    points?: SortOrder
    habilities?: SortOrder
    isAdmin?: SortOrder
    photoURL?: SortOrder
    area?: SortOrder
    linkedin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    code?: SortOrder
    projects?: ProjectOrderByRelationAggregateInput
    projectsColeader?: ProjectOrderByRelationAggregateInput
    applies?: ApplyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    bornDate?: SortOrder
    gender?: SortOrder
    n_dell?: SortOrder
    managerId?: SortOrder
    highligths?: SortOrder
    points?: SortOrder
    habilities?: SortOrder
    isAdmin?: SortOrder
    photoURL?: SortOrder
    area?: SortOrder
    linkedin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    code?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    bornDate?: DateTimeWithAggregatesFilter | Date | string
    gender?: StringWithAggregatesFilter | string
    n_dell?: StringWithAggregatesFilter | string
    managerId?: StringWithAggregatesFilter | string
    highligths?: StringWithAggregatesFilter | string
    points?: IntWithAggregatesFilter | number
    habilities?: StringWithAggregatesFilter | string
    isAdmin?: BoolWithAggregatesFilter | boolean
    photoURL?: StringNullableWithAggregatesFilter | string | null
    area?: StringWithAggregatesFilter | string
    linkedin?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    code?: StringNullableWithAggregatesFilter | string | null
  }

  export type HabilitieWhereInput = {
    AND?: Enumerable<HabilitieWhereInput>
    OR?: Enumerable<HabilitieWhereInput>
    NOT?: Enumerable<HabilitieWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
  }

  export type HabilitieOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type HabilitieWhereUniqueInput = {
    id?: string
  }

  export type HabilitieOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: HabilitieCountOrderByAggregateInput
    _max?: HabilitieMaxOrderByAggregateInput
    _min?: HabilitieMinOrderByAggregateInput
  }

  export type HabilitieScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HabilitieScalarWhereWithAggregatesInput>
    OR?: Enumerable<HabilitieScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HabilitieScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type ApplyWhereInput = {
    AND?: Enumerable<ApplyWhereInput>
    OR?: Enumerable<ApplyWhereInput>
    NOT?: Enumerable<ApplyWhereInput>
    id?: StringFilter | string
    projectId?: StringFilter | string
    userId?: StringFilter | string
    offerName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    why?: StringNullableFilter | string | null
    habilities?: StringNullableFilter | string | null
    feedback?: StringNullableFilter | string | null
    isAccepted?: BoolFilter | boolean
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ApplyOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    offerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    why?: SortOrder
    habilities?: SortOrder
    feedback?: SortOrder
    isAccepted?: SortOrder
    project?: ProjectOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ApplyWhereUniqueInput = {
    id?: string
  }

  export type ApplyOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    offerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    why?: SortOrder
    habilities?: SortOrder
    feedback?: SortOrder
    isAccepted?: SortOrder
    _count?: ApplyCountOrderByAggregateInput
    _max?: ApplyMaxOrderByAggregateInput
    _min?: ApplyMinOrderByAggregateInput
  }

  export type ApplyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApplyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApplyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApplyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    projectId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    offerName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    why?: StringNullableWithAggregatesFilter | string | null
    habilities?: StringNullableWithAggregatesFilter | string | null
    feedback?: StringNullableWithAggregatesFilter | string | null
    isAccepted?: BoolWithAggregatesFilter | boolean
  }

  export type ProjectCreateInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    applies?: ApplyCreateNestedManyWithoutProjectInput
    coleader?: UserCreateNestedOneWithoutProjectsColeaderInput
    owner: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    coleaderId?: string | null
    ownerId: string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    applies?: ApplyUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    applies?: ApplyUpdateManyWithoutProjectNestedInput
    coleader?: UserUpdateOneWithoutProjectsColeaderNestedInput
    owner?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    coleaderId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    applies?: ApplyUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUpdateManyMutationInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUncheckedUpdateManyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    coleaderId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagsCreateInput = {
    id: string
    name: string
  }

  export type TagsUncheckedCreateInput = {
    id: string
    name: string
  }

  export type TagsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    projectsColeader?: ProjectCreateNestedManyWithoutColeaderInput
    applies?: ApplyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    projectsColeader?: ProjectUncheckedCreateNestedManyWithoutColeaderInput
    applies?: ApplyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    projectsColeader?: ProjectUpdateManyWithoutColeaderNestedInput
    applies?: ApplyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    projectsColeader?: ProjectUncheckedUpdateManyWithoutColeaderNestedInput
    applies?: ApplyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HabilitieCreateInput = {
    id: string
    name: string
  }

  export type HabilitieUncheckedCreateInput = {
    id: string
    name: string
  }

  export type HabilitieUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HabilitieUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HabilitieUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HabilitieUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ApplyCreateInput = {
    id: string
    offerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    why?: string | null
    habilities?: string | null
    feedback?: string | null
    isAccepted?: boolean
    project: ProjectCreateNestedOneWithoutAppliesInput
    user: UserCreateNestedOneWithoutAppliesInput
  }

  export type ApplyUncheckedCreateInput = {
    id: string
    projectId: string
    userId: string
    offerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    why?: string | null
    habilities?: string | null
    feedback?: string | null
    isAccepted?: boolean
  }

  export type ApplyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    project?: ProjectUpdateOneRequiredWithoutAppliesNestedInput
    user?: UserUpdateOneRequiredWithoutAppliesNestedInput
  }

  export type ApplyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ApplyListRelationFilter = {
    every?: ApplyWhereInput
    some?: ApplyWhereInput
    none?: ApplyWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ApplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    projectId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tags?: SortOrder
    roles?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    endSubscription?: SortOrder
    coleaderId?: SortOrder
    ownerId?: SortOrder
    badge?: SortOrder
    blockedSubscription?: SortOrder
    status?: SortOrder
    feedback?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    projectId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tags?: SortOrder
    roles?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    endSubscription?: SortOrder
    coleaderId?: SortOrder
    ownerId?: SortOrder
    badge?: SortOrder
    blockedSubscription?: SortOrder
    status?: SortOrder
    feedback?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    projectId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tags?: SortOrder
    roles?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    endSubscription?: SortOrder
    coleaderId?: SortOrder
    ownerId?: SortOrder
    badge?: SortOrder
    blockedSubscription?: SortOrder
    status?: SortOrder
    feedback?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TagsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    bornDate?: SortOrder
    gender?: SortOrder
    n_dell?: SortOrder
    managerId?: SortOrder
    highligths?: SortOrder
    points?: SortOrder
    habilities?: SortOrder
    isAdmin?: SortOrder
    photoURL?: SortOrder
    area?: SortOrder
    linkedin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    code?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    bornDate?: SortOrder
    gender?: SortOrder
    n_dell?: SortOrder
    managerId?: SortOrder
    highligths?: SortOrder
    points?: SortOrder
    habilities?: SortOrder
    isAdmin?: SortOrder
    photoURL?: SortOrder
    area?: SortOrder
    linkedin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    code?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    bornDate?: SortOrder
    gender?: SortOrder
    n_dell?: SortOrder
    managerId?: SortOrder
    highligths?: SortOrder
    points?: SortOrder
    habilities?: SortOrder
    isAdmin?: SortOrder
    photoURL?: SortOrder
    area?: SortOrder
    linkedin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    code?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type HabilitieCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type HabilitieMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type HabilitieMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ApplyCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    offerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    why?: SortOrder
    habilities?: SortOrder
    feedback?: SortOrder
    isAccepted?: SortOrder
  }

  export type ApplyMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    offerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    why?: SortOrder
    habilities?: SortOrder
    feedback?: SortOrder
    isAccepted?: SortOrder
  }

  export type ApplyMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    offerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    why?: SortOrder
    habilities?: SortOrder
    feedback?: SortOrder
    isAccepted?: SortOrder
  }

  export type ApplyCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutProjectInput>, Enumerable<ApplyUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutProjectInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutProjectsColeaderInput = {
    create?: XOR<UserCreateWithoutProjectsColeaderInput, UserUncheckedCreateWithoutProjectsColeaderInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsColeaderInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ApplyUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutProjectInput>, Enumerable<ApplyUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutProjectInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ApplyUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutProjectInput>, Enumerable<ApplyUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ApplyUpsertWithWhereUniqueWithoutProjectInput>
    set?: Enumerable<ApplyWhereUniqueInput>
    disconnect?: Enumerable<ApplyWhereUniqueInput>
    delete?: Enumerable<ApplyWhereUniqueInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
    update?: Enumerable<ApplyUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ApplyUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ApplyScalarWhereInput>
  }

  export type UserUpdateOneWithoutProjectsColeaderNestedInput = {
    create?: XOR<UserCreateWithoutProjectsColeaderInput, UserUncheckedCreateWithoutProjectsColeaderInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsColeaderInput
    upsert?: UserUpsertWithoutProjectsColeaderInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectsColeaderInput, UserUncheckedUpdateWithoutProjectsColeaderInput>
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type ApplyUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutProjectInput>, Enumerable<ApplyUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ApplyUpsertWithWhereUniqueWithoutProjectInput>
    set?: Enumerable<ApplyWhereUniqueInput>
    disconnect?: Enumerable<ApplyWhereUniqueInput>
    delete?: Enumerable<ApplyWhereUniqueInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
    update?: Enumerable<ApplyUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ApplyUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ApplyScalarWhereInput>
  }

  export type ProjectCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutOwnerInput>, Enumerable<ProjectUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ProjectCreateNestedManyWithoutColeaderInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutColeaderInput>, Enumerable<ProjectUncheckedCreateWithoutColeaderInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutColeaderInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ApplyCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutUserInput>, Enumerable<ApplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutOwnerInput>, Enumerable<ProjectUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutColeaderInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutColeaderInput>, Enumerable<ProjectUncheckedCreateWithoutColeaderInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutColeaderInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ApplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutUserInput>, Enumerable<ApplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutOwnerInput>, Enumerable<ProjectUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ProjectUpdateManyWithoutColeaderNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutColeaderInput>, Enumerable<ProjectUncheckedCreateWithoutColeaderInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutColeaderInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutColeaderInput>
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutColeaderInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutColeaderInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ApplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutUserInput>, Enumerable<ApplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApplyUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ApplyWhereUniqueInput>
    disconnect?: Enumerable<ApplyWhereUniqueInput>
    delete?: Enumerable<ApplyWhereUniqueInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
    update?: Enumerable<ApplyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApplyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApplyScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutOwnerInput>, Enumerable<ProjectUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutColeaderNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutColeaderInput>, Enumerable<ProjectUncheckedCreateWithoutColeaderInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutColeaderInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutColeaderInput>
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutColeaderInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutColeaderInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ApplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ApplyCreateWithoutUserInput>, Enumerable<ApplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApplyUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ApplyWhereUniqueInput>
    disconnect?: Enumerable<ApplyWhereUniqueInput>
    delete?: Enumerable<ApplyWhereUniqueInput>
    connect?: Enumerable<ApplyWhereUniqueInput>
    update?: Enumerable<ApplyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApplyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApplyScalarWhereInput>
  }

  export type ProjectCreateNestedOneWithoutAppliesInput = {
    create?: XOR<ProjectCreateWithoutAppliesInput, ProjectUncheckedCreateWithoutAppliesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAppliesInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppliesInput = {
    create?: XOR<UserCreateWithoutAppliesInput, UserUncheckedCreateWithoutAppliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppliesInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutAppliesNestedInput = {
    create?: XOR<ProjectCreateWithoutAppliesInput, ProjectUncheckedCreateWithoutAppliesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAppliesInput
    upsert?: ProjectUpsertWithoutAppliesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutAppliesInput, ProjectUncheckedUpdateWithoutAppliesInput>
  }

  export type UserUpdateOneRequiredWithoutAppliesNestedInput = {
    create?: XOR<UserCreateWithoutAppliesInput, UserUncheckedCreateWithoutAppliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppliesInput
    upsert?: UserUpsertWithoutAppliesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAppliesInput, UserUncheckedUpdateWithoutAppliesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ApplyCreateWithoutProjectInput = {
    id: string
    offerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    why?: string | null
    habilities?: string | null
    feedback?: string | null
    isAccepted?: boolean
    user: UserCreateNestedOneWithoutAppliesInput
  }

  export type ApplyUncheckedCreateWithoutProjectInput = {
    id: string
    userId: string
    offerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    why?: string | null
    habilities?: string | null
    feedback?: string | null
    isAccepted?: boolean
  }

  export type ApplyCreateOrConnectWithoutProjectInput = {
    where: ApplyWhereUniqueInput
    create: XOR<ApplyCreateWithoutProjectInput, ApplyUncheckedCreateWithoutProjectInput>
  }

  export type UserCreateWithoutProjectsColeaderInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    applies?: ApplyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsColeaderInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    applies?: ApplyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsColeaderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsColeaderInput, UserUncheckedCreateWithoutProjectsColeaderInput>
  }

  export type UserCreateWithoutProjectsInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projectsColeader?: ProjectCreateNestedManyWithoutColeaderInput
    applies?: ApplyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projectsColeader?: ProjectUncheckedCreateNestedManyWithoutColeaderInput
    applies?: ApplyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type ApplyUpsertWithWhereUniqueWithoutProjectInput = {
    where: ApplyWhereUniqueInput
    update: XOR<ApplyUpdateWithoutProjectInput, ApplyUncheckedUpdateWithoutProjectInput>
    create: XOR<ApplyCreateWithoutProjectInput, ApplyUncheckedCreateWithoutProjectInput>
  }

  export type ApplyUpdateWithWhereUniqueWithoutProjectInput = {
    where: ApplyWhereUniqueInput
    data: XOR<ApplyUpdateWithoutProjectInput, ApplyUncheckedUpdateWithoutProjectInput>
  }

  export type ApplyUpdateManyWithWhereWithoutProjectInput = {
    where: ApplyScalarWhereInput
    data: XOR<ApplyUpdateManyMutationInput, ApplyUncheckedUpdateManyWithoutAppliesInput>
  }

  export type ApplyScalarWhereInput = {
    AND?: Enumerable<ApplyScalarWhereInput>
    OR?: Enumerable<ApplyScalarWhereInput>
    NOT?: Enumerable<ApplyScalarWhereInput>
    id?: StringFilter | string
    projectId?: StringFilter | string
    userId?: StringFilter | string
    offerName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    why?: StringNullableFilter | string | null
    habilities?: StringNullableFilter | string | null
    feedback?: StringNullableFilter | string | null
    isAccepted?: BoolFilter | boolean
  }

  export type UserUpsertWithoutProjectsColeaderInput = {
    update: XOR<UserUpdateWithoutProjectsColeaderInput, UserUncheckedUpdateWithoutProjectsColeaderInput>
    create: XOR<UserCreateWithoutProjectsColeaderInput, UserUncheckedCreateWithoutProjectsColeaderInput>
  }

  export type UserUpdateWithoutProjectsColeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    applies?: ApplyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsColeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    applies?: ApplyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projectsColeader?: ProjectUpdateManyWithoutColeaderNestedInput
    applies?: ApplyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projectsColeader?: ProjectUncheckedUpdateManyWithoutColeaderNestedInput
    applies?: ApplyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateWithoutOwnerInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    applies?: ApplyCreateNestedManyWithoutProjectInput
    coleader?: UserCreateNestedOneWithoutProjectsColeaderInput
  }

  export type ProjectUncheckedCreateWithoutOwnerInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    coleaderId?: string | null
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    applies?: ApplyUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput>
  }

  export type ProjectCreateWithoutColeaderInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    applies?: ApplyCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutColeaderInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    ownerId: string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    applies?: ApplyUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutColeaderInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutColeaderInput, ProjectUncheckedCreateWithoutColeaderInput>
  }

  export type ApplyCreateWithoutUserInput = {
    id: string
    offerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    why?: string | null
    habilities?: string | null
    feedback?: string | null
    isAccepted?: boolean
    project: ProjectCreateNestedOneWithoutAppliesInput
  }

  export type ApplyUncheckedCreateWithoutUserInput = {
    id: string
    projectId: string
    offerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    why?: string | null
    habilities?: string | null
    feedback?: string | null
    isAccepted?: boolean
  }

  export type ApplyCreateOrConnectWithoutUserInput = {
    where: ApplyWhereUniqueInput
    create: XOR<ApplyCreateWithoutUserInput, ApplyUncheckedCreateWithoutUserInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutOwnerInput, ProjectUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutOwnerInput, ProjectUncheckedUpdateWithoutOwnerInput>
  }

  export type ProjectUpdateManyWithWhereWithoutOwnerInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>
    OR?: Enumerable<ProjectScalarWhereInput>
    NOT?: Enumerable<ProjectScalarWhereInput>
    projectId?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tags?: StringFilter | string
    roles?: StringFilter | string
    description?: StringFilter | string
    start?: DateTimeFilter | Date | string
    end?: DateTimeFilter | Date | string
    endSubscription?: DateTimeFilter | Date | string
    coleaderId?: StringNullableFilter | string | null
    ownerId?: StringFilter | string
    badge?: StringFilter | string
    blockedSubscription?: BoolFilter | boolean
    status?: StringFilter | string
    feedback?: StringNullableFilter | string | null
  }

  export type ProjectUpsertWithWhereUniqueWithoutColeaderInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutColeaderInput, ProjectUncheckedUpdateWithoutColeaderInput>
    create: XOR<ProjectCreateWithoutColeaderInput, ProjectUncheckedCreateWithoutColeaderInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutColeaderInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutColeaderInput, ProjectUncheckedUpdateWithoutColeaderInput>
  }

  export type ProjectUpdateManyWithWhereWithoutColeaderInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectsColeaderInput>
  }

  export type ApplyUpsertWithWhereUniqueWithoutUserInput = {
    where: ApplyWhereUniqueInput
    update: XOR<ApplyUpdateWithoutUserInput, ApplyUncheckedUpdateWithoutUserInput>
    create: XOR<ApplyCreateWithoutUserInput, ApplyUncheckedCreateWithoutUserInput>
  }

  export type ApplyUpdateWithWhereUniqueWithoutUserInput = {
    where: ApplyWhereUniqueInput
    data: XOR<ApplyUpdateWithoutUserInput, ApplyUncheckedUpdateWithoutUserInput>
  }

  export type ApplyUpdateManyWithWhereWithoutUserInput = {
    where: ApplyScalarWhereInput
    data: XOR<ApplyUpdateManyMutationInput, ApplyUncheckedUpdateManyWithoutAppliesInput>
  }

  export type ProjectCreateWithoutAppliesInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
    coleader?: UserCreateNestedOneWithoutProjectsColeaderInput
    owner: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutAppliesInput = {
    projectId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags: string
    roles: string
    description: string
    start: Date | string
    end: Date | string
    endSubscription: Date | string
    coleaderId?: string | null
    ownerId: string
    badge: string
    blockedSubscription?: boolean
    status?: string
    feedback?: string | null
  }

  export type ProjectCreateOrConnectWithoutAppliesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAppliesInput, ProjectUncheckedCreateWithoutAppliesInput>
  }

  export type UserCreateWithoutAppliesInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projects?: ProjectCreateNestedManyWithoutOwnerInput
    projectsColeader?: ProjectCreateNestedManyWithoutColeaderInput
  }

  export type UserUncheckedCreateWithoutAppliesInput = {
    id: string
    email: string
    name?: string | null
    password: string
    bornDate: Date | string
    gender: string
    n_dell: string
    managerId: string
    highligths?: string
    points?: number
    habilities: string
    isAdmin?: boolean
    photoURL?: string | null
    area?: string
    linkedin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    code?: string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    projectsColeader?: ProjectUncheckedCreateNestedManyWithoutColeaderInput
  }

  export type UserCreateOrConnectWithoutAppliesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppliesInput, UserUncheckedCreateWithoutAppliesInput>
  }

  export type ProjectUpsertWithoutAppliesInput = {
    update: XOR<ProjectUpdateWithoutAppliesInput, ProjectUncheckedUpdateWithoutAppliesInput>
    create: XOR<ProjectCreateWithoutAppliesInput, ProjectUncheckedCreateWithoutAppliesInput>
  }

  export type ProjectUpdateWithoutAppliesInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    coleader?: UserUpdateOneWithoutProjectsColeaderNestedInput
    owner?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAppliesInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    coleaderId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutAppliesInput = {
    update: XOR<UserUpdateWithoutAppliesInput, UserUncheckedUpdateWithoutAppliesInput>
    create: XOR<UserCreateWithoutAppliesInput, UserUncheckedCreateWithoutAppliesInput>
  }

  export type UserUpdateWithoutAppliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUpdateManyWithoutOwnerNestedInput
    projectsColeader?: ProjectUpdateManyWithoutColeaderNestedInput
  }

  export type UserUncheckedUpdateWithoutAppliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    n_dell?: StringFieldUpdateOperationsInput | string
    managerId?: StringFieldUpdateOperationsInput | string
    highligths?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    habilities?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    area?: StringFieldUpdateOperationsInput | string
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    projectsColeader?: ProjectUncheckedUpdateManyWithoutColeaderNestedInput
  }

  export type ApplyUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAppliesNestedInput
  }

  export type ApplyUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplyUncheckedUpdateManyWithoutAppliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectUpdateWithoutOwnerInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    applies?: ApplyUpdateManyWithoutProjectNestedInput
    coleader?: UserUpdateOneWithoutProjectsColeaderNestedInput
  }

  export type ProjectUncheckedUpdateWithoutOwnerInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    coleaderId?: NullableStringFieldUpdateOperationsInput | string | null
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    applies?: ApplyUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutProjectsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    coleaderId?: NullableStringFieldUpdateOperationsInput | string | null
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpdateWithoutColeaderInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    applies?: ApplyUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutColeaderInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    applies?: ApplyUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutProjectsColeaderInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    endSubscription?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    badge?: StringFieldUpdateOperationsInput | string
    blockedSubscription?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    project?: ProjectUpdateOneRequiredWithoutAppliesNestedInput
  }

  export type ApplyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    offerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    why?: NullableStringFieldUpdateOperationsInput | string | null
    habilities?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}